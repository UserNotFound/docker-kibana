<% u = URI(ENV['DATABASE_URL']) %>
<% elasticsearch_url = "#{u.scheme}://#{u.user}:#{u.password}@#{u.host}:#{u.port}" %>
<% user = "#{u.user}" %>
<% password = "#{u.password}" %>
<% auth = Base64.encode64(user + ':' + password).chomp %>

# Kibana is served by a back end server. This controls which port to use.
server.port: 80

# The host to bind the server to.
server.host: "0.0.0.0"

# The maximum payload size in bytes on incoming server requests.
# server.maxPayloadBytes: 1048576

# The Elasticsearch instance to use for all your queries.
elasticsearch.hosts: "<%= elasticsearch_url %>"

# preserve_elasticsearch_host true will send the hostname specified in `elasticsearch`. If you set it to false,
# then the host you use to connect to *this* Kibana instance will be sent.
elasticsearch.preserveHost: true

# Kibana uses an index in Elasticsearch to store saved searches, visualizations
# and dashboards. It will create a new index if it doesn't already exist.
kibana.index: ".kibana"

# The default application to load.
#kibana.defaultAppId: "discover"

# If your Elasticsearch is protected with basic auth, these are the user credentials
# used by the Kibana server to perform maintenance on the kibana_index at startup. Your Kibana
# users will still need to authenticate with Elasticsearch (which is proxied through
# the Kibana server)
elasticsearch.username: "<%= user %>"
elasticsearch.password: "<%= password %>"

# Set to false to have a complete disregard for the validity of the SSL
# certificate.
# TODO: use a variable in the erb:
elasticsearch.ssl.verificationMode: none

# Time in milliseconds to wait for responses from the back end or elasticsearch.
# This must be > 0
elasticsearch.requestTimeout: 300000

# Time in milliseconds for Elasticsearch to wait for responses from shards.
# Set to 0 to disable.
elasticsearch.shardTimeout: 0
